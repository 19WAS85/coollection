h1. Coollection

*A cool way to manipulate collections in Java.*

Iterate over a collection is a medieval way to filtering, mapping and ordering. And with Java we are used to work like that. Coollection changes that, is the future, while closures don't arrives for Java.

"Download Coollection 0.1.0":http://github.com/downloads/wagnerandrade/coollection/coollection-0.1.0.jar

h2. How it works?

It's easy to use. Just add @import static com.wagnerandade.coollection.Coollection.*;@ in your class and... More nothing!

h2. How to use this?

h3. 1 - Filter

First you need a Collection. Here we create a Animal List, and we called it animals.

<pre>
List<Animal> animals;
</pre>

Later you goes add a lot of animals in this list.

Now, you want to take *all* cats, it's easy for Coollections! In this case, name is a method (@animal.name()@).

<pre>
from(animals).where("name", eq("Cat")).all();
</pre>

Or, would the *first* animal with 2 year old? Easy too!

<pre>
from(animals).where("age", eq(2)).first();
</pre>

h3. 2 - Filter specification

You can be more specific in your query, adding more specifications, like *and* and *or*.

<pre>
from(animals).where("name", eq("Lion")).and("age", eq(2)).all();
from(animals).where("name", eq("Dog")).or("age", eq(5)).all();
</pre>

h3. 3 - Matchers

There are other matchers to be precise!

<pre>
eq("Cat")
contains("og")
greaterThan(3)
lessThan(10)
isNull()
</pre>

Or a special matcher, called *not*.

<pre>
not(eq("Bird"))
not(contains("at"))
not(isNull())
</pre>

h3. 4 - Order

Order is a very interesting feature to sort your collection.

<pre>
from(animals).where("name", eq("Cat")).orderBy("age").all();
from(animals).where("age", eq(5)).orderBy("name", Order.DESC).first();
</pre>

Be happy!